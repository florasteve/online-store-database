name: DB CI (build + smoke + tSQLt)

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

concurrency:
  group: db-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      SA_PASSWORD: ${{ secrets.SA_PASSWORD }}

    steps:
      - uses: actions/checkout@v4

      - name: Start SQL Server via Docker Compose
        run: |
          docker compose -f docker/docker-compose.yml up -d
          # Wait up to ~8 minutes for health
          for i in {1..160}; do
            if docker ps --filter "name=store-mssql" --filter "health=healthy" --format "{{.Status}}" | grep -qi healthy; then
              echo "SQL Server is healthy."; break
            fi
            echo "Waiting for SQL Server..."; sleep 3
          done
          docker ps
          sleep 10

      - name: Apply top-level SQL in order (excludes sql/tests, vendor)
        run: |
          set -euo pipefail
          # Final readiness gate
          for i in {1..60}; do
            /usr/bin/docker exec store-mssql /opt/mssql-tools18/bin/sqlcmd -C -S localhost -U SA -P "$SA_PASSWORD" -Q "SELECT 1" && break || sleep 2
          done
          echo "Applying /var/opt/sql/*.sql (top-level only) in lexicographic order..."
          for f in $(/usr/bin/docker exec store-mssql sh -lc 'ls -1 /var/opt/sql/*.sql 2>/dev/null | sort'); do
            echo ">> $f"
            /usr/bin/docker exec -i store-mssql /opt/mssql-tools18/bin/sqlcmd -C -S localhost -U SA -P "$SA_PASSWORD" -i "$f"
          done

      - name: Prepare DB for tSQLt (enable CLR, TRUSTWORTHY ON, owner sa)
        run: |
          # Server
          /usr/bin/docker exec -i store-mssql /opt/mssql-tools18/bin/sqlcmd -C -S localhost -U SA -P "$SA_PASSWORD" -Q "EXEC sp_configure 'show advanced options',1; RECONFIGURE;"
          /usr/bin/docker exec -i store-mssql /opt/mssql-tools18/bin/sqlcmd -C -S localhost -U SA -P "$SA_PASSWORD" -Q "EXEC sp_configure 'clr enabled',1; RECONFIGURE;"
          # Database
          /usr/bin/docker exec -i store-mssql /opt/mssql-tools18/bin/sqlcmd -C -S localhost -U SA -P "$SA_PASSWORD" -Q "ALTER DATABASE OnlineStoreDB SET TRUSTWORTHY ON;"
          /usr/bin/docker exec -i store-mssql /opt/mssql-tools18/bin/sqlcmd -C -S localhost -U SA -P "$SA_PASSWORD" -Q "USE OnlineStoreDB; EXEC sys.sp_changedbowner 'sa';"

      - name: Install tSQLt (vendored if present)
        run: |
          if /usr/bin/docker exec store-mssql sh -lc '[ -f "/var/opt/sql/tests/_tSQLt/tSQLt.class.sql" ]'; then
            echo "Installing tSQLt..."
            /usr/bin/docker exec -i store-mssql /opt/mssql-tools18/bin/sqlcmd -C -S localhost -U SA -P "$SA_PASSWORD" -d OnlineStoreDB -i "/var/opt/sql/tests/_tSQLt/tSQLt.class.sql"
          else
            echo "tSQLt.class.sql not found; skipping tSQLt install."
          fi

      - name: Run tSQLt tests (if present)
        run: |
          if /usr/bin/docker exec store-mssql sh -lc '[ -f "/var/opt/sql/tests/_bootstrap.sql" ]'; then
            /usr/bin/docker exec -i store-mssql /opt/mssql-tools18/bin/sqlcmd -C -S localhost -U SA -P "$SA_PASSWORD" -d OnlineStoreDB -i "/var/opt/sql/tests/_bootstrap.sql"
          else
            echo "No _bootstrap.sql; skipping bootstrap."
          fi
          if /usr/bin/docker exec store-mssql sh -lc '[ -f "/var/opt/sql/tests/10_OrderOps_Tests.sql" ]'; then
            /usr/bin/docker exec -i store-mssql /opt/mssql-tools18/bin/sqlcmd -C -S localhost -U SA -P "$SA_PASSWORD" -d OnlineStoreDB -i "/var/opt/sql/tests/10_OrderOps_Tests.sql"
          else
            echo "No test suite files; skipping suite."
          fi
          if /usr/bin/docker exec store-mssql sh -lc "[ -f \"/var/opt/sql/tests/_tSQLt/tSQLt.class.sql\" ]"; then
            /usr/bin/docker exec -i store-mssql /opt/mssql-tools18/bin/sqlcmd -C -S localhost -U SA -P "$SA_PASSWORD" -d OnlineStoreDB -Q "EXEC tSQLt.RunAll;"
          else
            echo "tSQLt not installed; skipping RunAll."
          fi

      - name: Diagnostics on failure
        if: failure() || always()
        run: |
          docker ps
          docker logs store-mssql | tail -n 200 || true
