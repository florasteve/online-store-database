name: DB Tests (tSQLt)

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start SQL Server via Docker Compose
        run: |
          docker compose -f docker/docker-compose.yml up -d
          # Wait for container health
          for i in {1..60}; do
            if docker ps --filter "name=store-mssql" --filter "health=healthy" --format "{{.Status}}" | grep -qi healthy; then
              echo "SQL Server is healthy."
              break
            fi
            echo "Waiting for SQL Server..."
            sleep 3
          done

      - name: Apply database SQL (schema  procs  views  seed  extras)
        env:
          SA_PASSWORD: YourStrong!Passw0rd
        run: |
          # Core files (be permissive on optional ones)
          docker exec -i store-mssql /opt/mssql-tools18/bin/sqlcmd -C -S localhost -U SA -P "$SA_PASSWORD" -i /var/opt/sql/01_schema.sql
          docker exec -i store-mssql /opt/mssql-tools18/bin/sqlcmd -C -S localhost -U SA -P "$SA_PASSWORD" -i /var/opt/sql/04_procs.sql || true
          docker exec -i store-mssql /opt/mssql-tools18/bin/sqlcmd -C -S localhost -U SA -P "$SA_PASSWORD" -i /var/opt/sql/05_triggers.sql || true
          docker exec -i store-mssql /opt/mssql-tools18/bin/sqlcmd -C -S localhost -U SA -P "$SA_PASSWORD" -i /var/opt/sql/03_views.sql || true
          docker exec -i store-mssql /opt/mssql-tools18/bin/sqlcmd -C -S localhost -U SA -P "$SA_PASSWORD" -i /var/opt/sql/02_seed.sql || true

          # Extras in numeric order if present
          for f in /var/opt/sql/06_migrations.sql /var/opt/sql/07_order_ops.sql /var/opt/sql/08_views_status.sql /var/opt/sql/09_view_low_stock.sql /var/opt/sql/10_constraints.sql /var/opt/sql/11_categories.sql /var/opt/sql/12_close_order.sql; do
            if docker exec store-mssql test -f "$f"; then
              docker exec -i store-mssql /opt/mssql-tools18/bin/sqlcmd -C -S localhost -U SA -P "$SA_PASSWORD" -i "$f" || true
            fi
          done

      - name: Install unzip (for tSQLt download)
        run: sudo apt-get update && sudo apt-get install -y unzip

      - name: Download tSQLt (ZIP) and place tSQLt.class.sql in repo path
        run: |
          mkdir -p sql/tests/_tSQLt
          curl -L -o /tmp/tsqlt.zip http://tsqlt.org/download/tsqlt/
          unzip -j -o /tmp/tsqlt.zip "*tSQLt.class.sql" -d sql/tests/_tSQLt
          ls -l sql/tests/_tSQLt

      - name: Enable CLR & install tSQLt into OnlineStoreDB
        env:
          SA_PASSWORD: YourStrong!Passw0rd
        run: |
          docker exec -i store-mssql /opt/mssql-tools18/bin/sqlcmd -C -S localhost -U SA -P "$SA_PASSWORD" -Q "EXEC sp_configure 'show advanced options',1; RECONFIGURE;"
          docker exec -i store-mssql /opt/mssql-tools18/bin/sqlcmd -C -S localhost -U SA -P "$SA_PASSWORD" -Q "EXEC sp_configure 'clr enabled',1; RECONFIGURE;"

          # Install the framework into the DB (official guidance is to run the class script). 
          docker exec -i store-mssql /opt/mssql-tools18/bin/sqlcmd -C -S localhost -U SA -P "$SA_PASSWORD" -d OnlineStoreDB -i "/var/opt/sql/tests/_tSQLt/tSQLt.class.sql"

      - name: Run test bootstrap & tests, then all tSQLt tests
        env:
          SA_PASSWORD: YourStrong!Passw0rd
        run: |
          # DB trust/owner bootstrap + your tests
          docker exec -i store-mssql /opt/mssql-tools18/bin/sqlcmd -C -S localhost -U SA -P "$SA_PASSWORD" -d OnlineStoreDB -i "/var/opt/sql/tests/_bootstrap.sql"
          docker exec -i store-mssql /opt/mssql-tools18/bin/sqlcmd -C -S localhost -U SA -P "$SA_PASSWORD" -d OnlineStoreDB -i "/var/opt/sql/tests/10_OrderOps_Tests.sql"

          # Execute all tests. If any test fails, tSQLt.RunAll raises an error â†’ step fails.
          docker exec -i store-mssql /opt/mssql-tools18/bin/sqlcmd -C -S localhost -U SA -P "$SA_PASSWORD" -d OnlineStoreDB -Q "EXEC tSQLt.RunAll;"
